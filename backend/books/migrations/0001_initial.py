# Generated by Django 4.2.21 on 2025-06-03 09:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('book_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('isbn', models.CharField(help_text='ISBN-10 or ISBN-13', max_length=13, unique=True)),
                ('title', models.CharField(db_index=True, help_text='Book title', max_length=255)),
                ('author', models.CharField(db_index=True, help_text='Primary author name', max_length=255)),
                ('publication_year', models.PositiveIntegerField(help_text='Year of publication', validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(9999)])),
                ('publisher', models.CharField(blank=True, help_text='Publisher name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Book description or summary')),
                ('total_copies', models.PositiveIntegerField(default=1, help_text='Total number of copies in the library', validators=[django.core.validators.MinValueValidator(1)])),
                ('available_copies', models.PositiveIntegerField(default=1, help_text='Number of copies currently available', validators=[django.core.validators.MinValueValidator(0)])),
                ('location', models.CharField(blank=True, help_text='Physical location in the library (e.g., Shelf A-123)', max_length=100)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this book is currently available in the catalog')),
            ],
            options={
                'verbose_name': 'Book',
                'verbose_name_plural': 'Books',
                'db_table': 'books',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='BookStatistics',
            fields=[
                ('book', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='statistics', serialize=False, to='books.book')),
                ('total_borrowed_count', models.PositiveIntegerField(default=0, help_text='Total number of times this book has been borrowed')),
                ('current_borrowed_count', models.PositiveIntegerField(default=0, help_text='Number of copies currently borrowed')),
                ('average_borrowing_duration', models.DecimalField(decimal_places=2, default=0.0, help_text='Average duration in days that this book is borrowed', max_digits=5)),
                ('popularity_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Popularity score from 0 to 100', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('last_borrowed_date', models.DateTimeField(blank=True, help_text='Date when this book was last borrowed', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last time these statistics were updated')),
            ],
            options={
                'verbose_name': 'Book Statistics',
                'verbose_name_plural': 'Book Statistics',
                'db_table': 'book_statistics',
                'ordering': ['-popularity_score'],
            },
        ),
        migrations.CreateModel(
            name='BookCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='books.bookcategory')),
            ],
            options={
                'verbose_name': 'Book Category',
                'verbose_name_plural': 'Book Categories',
                'db_table': 'book_categories',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='books.bookcategory'),
        ),
        migrations.AddField(
            model_name='book',
            name='subcategory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategory_books', to='books.bookcategory'),
        ),
        migrations.CreateModel(
            name='BorrowingRecord',
            fields=[
                ('record_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('borrow_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the book was borrowed')),
                ('due_date', models.DateTimeField(help_text='Date and time when the book should be returned')),
                ('return_date', models.DateTimeField(blank=True, help_text='Actual date and time when the book was returned', null=True)),
                ('status', models.CharField(choices=[('borrowed', 'Borrowed'), ('returned', 'Returned'), ('overdue', 'Overdue'), ('renewed', 'Renewed'), ('lost', 'Lost')], db_index=True, default='borrowed', max_length=20)),
                ('late_fees', models.DecimalField(decimal_places=2, default=0.0, help_text='Late fees accumulated', max_digits=10)),
                ('renewal_count', models.PositiveIntegerField(default=0, help_text='Number of times this borrowing has been renewed')),
                ('max_renewals', models.PositiveIntegerField(default=2, help_text='Maximum number of renewals allowed')),
                ('reminder_sent', models.BooleanField(default=False, help_text='Whether a reminder email has been sent')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this borrowing')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='borrowing_records', to='books.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='borrowing_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Borrowing Record',
                'verbose_name_plural': 'Borrowing Records',
                'db_table': 'borrowing_records',
                'ordering': ['-borrow_date'],
                'indexes': [models.Index(fields=['user', 'status'], name='borrowing_r_user_id_5aad87_idx'), models.Index(fields=['book', 'status'], name='borrowing_r_book_id_44e1ff_idx'), models.Index(fields=['due_date'], name='borrowing_r_due_dat_9de022_idx'), models.Index(fields=['status', 'due_date'], name='borrowing_r_status_436f8f_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['isbn'], name='books_isbn_ce4a1a_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['title'], name='books_title_7a737c_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['author'], name='books_author_1c43f5_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['category'], name='books_categor_7d8cd4_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['is_active', 'available_copies'], name='books_is_acti_7f6301_idx'),
        ),
    ]
