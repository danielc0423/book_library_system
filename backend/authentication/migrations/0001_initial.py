# Generated by Django 4.2.21 on 2025-06-03 09:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('faculty', 'Faculty'), ('staff', 'Staff'), ('admin', 'Administrator')], default='student', help_text='Type of library user', max_length=20)),
                ('max_books_allowed', models.PositiveIntegerField(default=5, help_text='Maximum number of books this user can borrow')),
                ('registration_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date when the user registered')),
                ('last_login_date', models.DateTimeField(blank=True, help_text='Last successful login timestamp', null=True)),
                ('email_verified', models.BooleanField(default=False, help_text='Whether the email address has been verified')),
                ('phone_verified', models.BooleanField(default=False, help_text='Whether the phone number has been verified')),
                ('idcs_user_id', models.CharField(blank=True, help_text='Unique identifier from Oracle IDCS', max_length=100, null=True, unique=True)),
                ('idcs_guid', models.CharField(blank=True, help_text='Oracle IDCS GUID', max_length=100, null=True, unique=True)),
                ('idcs_last_sync', models.DateTimeField(blank=True, help_text='Last synchronization with Oracle IDCS', null=True)),
                ('idcs_groups', models.JSONField(blank=True, default=list, help_text='IDCS group memberships')),
                ('mfa_enabled', models.BooleanField(default=False, help_text='Whether MFA is enabled for this user')),
                ('backup_email', models.EmailField(blank=True, help_text='Secondary email for account recovery', max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Library User',
                'verbose_name_plural': 'Library Users',
                'db_table': 'library_users',
                'indexes': [models.Index(fields=['email'], name='library_use_email_8a6e2f_idx'), models.Index(fields=['idcs_user_id'], name='library_use_idcs_us_89d91d_idx'), models.Index(fields=['user_type'], name='library_use_user_ty_eab815_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
