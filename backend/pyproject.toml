[project]
name = "book-library-system"
version = "1.0.0"
description = "A comprehensive digital library management system with Oracle Cloud integration"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "Library System Team", email = "admin@library.com"},
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://github.com/yourorg/book-library-system"
Documentation = "https://book-library-system.readthedocs.io"
Repository = "https://github.com/yourorg/book-library-system.git"
Issues = "https://github.com/yourorg/book-library-system/issues"

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[tool.uv]
# UV specific configuration for faster package management
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-django>=4.5.2",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.4.1",
    "django-debug-toolbar>=4.1.0",
    "django-extensions>=3.2.3",
    "ipython>=8.14.0",
    "factory-boy>=3.3.0",
    "faker>=19.2.0",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  migrations
  | .venv
  | venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["library_system", "books", "authentication", "analytics", "notifications"]
known_django = ["django"]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["*/migrations/*", ".venv/*", "venv/*"]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "library_system.settings.development"
python_files = ["test_*.py", "*_test.py", "tests.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
testpaths = ["tests", "*/tests"]
addopts = [
    "--reuse-db",
    "--nomigrations",
    "--cov=.",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
    "--cov-config=.coveragerc",
]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main"]

[tool.mypy.plugins.django-stubs]
django_settings_module = "library_system.settings.development"

[tool.coverage.run]
source = ["."]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/virtualenv/*",
    "*/node_modules/*",
    "*/htmlcov/*",
    "*/staticfiles/*",
    "*/media/*",
    "manage.py",
    "*/settings/*",
    "*/wsgi.py",
    "*/asgi.py",
    "*/celery.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# Django-specific settings
[tool.django-stubs]
django_settings_module = "library_system.settings.development"

# Celery settings
[tool.celery]
broker_url = "redis://localhost:6379/0"
result_backend = "redis://localhost:6379/0"
task_serializer = "json"
result_serializer = "json"
accept_content = ["json"]
timezone = "UTC"
enable_utc = true
